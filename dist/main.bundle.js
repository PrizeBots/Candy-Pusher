"use strict";(self.webpackChunkcandy_pusher=self.webpackChunkcandy_pusher||[]).push([[179],{897:()=>{class e{constructor(e,t){this.engine=e,this.canvas=t,this.scene=new BABYLON.Scene(e),this.scene.enablePhysics(new BABYLON.Vector3(0,-50,0),new BABYLON.CannonJSPlugin),this._setupLighting(),this._setupCamera(),this.cameraLocked=!0,this.camera}cameraLock(){console.log("camera lock"),this.cameraLocked?(this.cameraLocked=!1,this.camera.attachControl(this.canvas,!0)):(this.cameraLocked=!0,this.camera.detachControl(this.canvas))}_setupLighting(){new BABYLON.HemisphericLight("light",new BABYLON.Vector3(0,.9,0),this.scene).intensity=.85}_setupCamera(){var e=new BABYLON.ArcRotateCamera("camera1",Math.PI/2,Math.PI/2.8,200,new BABYLON.Vector3(0,0,0),this.scene);e.target.y=-22,e.fov=.7,e.aspectRatio=this.canvas.width/this.canvas.height,this.camera=e}getScene(){return this.scene}}class t{constructor(e){this.scene=e,this.wallMaterial=null,this.pusherMaterial=null,this.coinMaterials={},this.objectMaterials={},this._createMaterials()}_createMaterials(){this.collisionBoxMaterial=new BABYLON.StandardMaterial("collisionBoxMaterial",this.scene),this.collisionBoxMaterial.diffuseColor=new BABYLON.Color3(.196,.784,.196),this.wallMaterial=new BABYLON.StandardMaterial("wallMaterial",this.scene),this.wallMaterial.diffuseColor=new BABYLON.Color3(0,.31,.31),this.pusherMaterial=new BABYLON.StandardMaterial("pusherMaterial",this.scene),this.pusherMaterial.diffuseColor=new BABYLON.Color3(2,.31,.31),this.coinMaterials.gold=new BABYLON.StandardMaterial("coinGoldMat",this.scene),this.coinMaterials.gold.diffuseColor=new BABYLON.Color3(1,.843,0),this.coinMaterials.red=new BABYLON.StandardMaterial("coinRedMat",this.scene),this.coinMaterials.red.diffuseColor=new BABYLON.Color3(1,0,0),this.coinMaterials.blue=new BABYLON.StandardMaterial("coinBlueMat",this.scene),this.coinMaterials.blue.diffuseColor=new BABYLON.Color3(0,0,1),this.objectMaterials.donut=new BABYLON.StandardMaterial("donut",this.scene),this.objectMaterials.donut.diffuseColor=new BABYLON.Color3(1,.5,.5)}getMaterial(e){return this.coinMaterials[e]?this.coinMaterials[e]:this.objectMaterials[e]?this.objectMaterials[e]:"wallMaterial"===e?this.wallMaterial:"pusherMaterial"===e?this.pusherMaterial:"collisionBoxMaterial"===e?this.collisionBoxMaterial:null}}class o{constructor(e,t,o){this.scene=e,this.materialManager=t,this.game=o,this.pusherSpeed=.5,this.pusherDirection=1,this.pusherLimitFront=20,this.pusherLimitBack=-15,this.frameRate=60,this.createPusher()}createPusher(){const e=BABYLON.MeshBuilder.CreateBox("pusher",{width:40,height:10,depth:50},this.scene);return e.position.y=1,e.position.z=-25,e.material=this.materialManager.getMaterial("pusherMaterial"),e.physicsImpostor=new BABYLON.PhysicsImpostor(e,BABYLON.PhysicsImpostor.BoxImpostor,{mass:0,restitution:0,friction:1},this.scene),this.pusher=e,this.pusherParent=new BABYLON.Mesh("pusherParent",this.scene),this.pusherParent.addChild(this.pusher),this.updatePusher(),o}updatePusher(){if(this.pusher){const e=10,t=new BABYLON.Animation("zSlide","position.z",e,BABYLON.Animation.ANIMATIONTYPE_FLOAT,BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE),o=[];o.push({frame:0,value:this.pusherLimitFront}),o.push({frame:e,value:this.pusherLimitBack}),o.push({frame:2*e,value:this.pusherLimitFront}),t.setKeys(o),this.pusherParent.animations.push(t),this.scene.beginAnimation(this.pusherParent,0,2*e,!0,this.pusherSpeed)}}bigPush(){console.log("  bigPush !"),this.pusherDirection=1,this.pusherSpeed=10,this.pusherLimitFront=15,setTimeout((()=>{this.pusherSpeed=.25,this.pusherLimitFront=-5}),2e3)}}class i{constructor(e){this.game=e,this.bonusWindowActive=!1,this.bonusWindowTimer=null,this.bonusCount=0,this.getTreat=!1,this.init()}init(){}checkGoal(e){this.handleBonusWindow();var t=e.name;e.isCounted||("cookieCylinder"===t?(this.game.score++,this.bonusCount++,this.game.cookieCount++,this.game.uiManager.updateCookieCounter()):"cupcakeCylinder"===t?(this.game.cupcakeCount+=1,this.getTreat=!0,this.game.score+=2,this.bonusCount+=2,this.game.uiManager.updateCupcakeCounter()):"donutCylinder"===t?(this.game.donutCount+=1,this.getTreat=!0,this.game.score+=4,this.bonusCount+=4,this.game.uiManager.updateDonutCounter()):"chocolateBarBox"===t?(this.game.chocolateCount+=1,this.getTreat=!0,this.game.score+=8,this.bonusCount+=8,this.game.uiManager.updateChocolateCounter()):"pieBox"===t?(this.game.pieCount+=1,this.getTreat=!0,this.game.score+=16,this.bonusCount+=16,this.game.uiManager.updatePieCounter(),e.isCounted=!0):console.log("goalPlane ?????s ",t)),1===this.bonusCount?this.game.get1Sound.play():2===this.bonusCount?this.game.get2Sound.play():3===this.bonusCount?this.game.get3Sound.play():4===this.bonusCount?this.game.get4Sound.play():5===this.bonusCount?this.game.get5Sound.play():6===this.bonusCount?this.game.get6Sound.play():7===this.bonusCount?this.game.get7Sound.play():8===this.bonusCount?this.game.get8Sound.play():9===this.bonusCount?this.game.get9Sound.play():10===this.bonusCount&&this.game.get10Sound.play(),this.getTreat&&(this.getTreat=!1,this.game.getTreatSound.play()),e.dispose(),this.game.uiManager.updateScore()}handleBonusWindow(){this.bonusWindowActive||(this.bonusWindowActive=!0,this.bonusCount=0,this.bonusWindowTimer=setTimeout((()=>{console.log(`Bonus value: ${this.bonusCount}`),this.handleDropRewards(),this.bonusWindowActive=!1}),2e3))}handleDropRewards(){if(this.bonusCount>1&&this.bonusCount<=3){var e=new BABYLON.Vector3(0,40,0);this.game.dropManager.dropCookie(!1,e),this.game.dropTreatSound.play()}else this.bonusCount>3&&this.bonusCount<=5?(this.game.dropManager.dropCupcake(),this.game.dropTreat2Sound.play()):this.bonusCount>=6&&this.bonusCount<8?(this.game.dropManager.dropDonut(),this.game.dropTreat2Sound.play()):this.bonusCount>=7&&this.bonusCount<10?(this.game.dropManager.dropCupcake(),this.game.dropManager.dropDonut(),this.game.dropTreat2Sound.play()):this.bonusCount>=10&&this.bonusCount<12?(this.game.dropManager.dropChocolateBar(),this.game.dropTreat2Sound.play()):this.bonusCount>=12&&this.bonusCount<14?(this.game.dropManager.dropCupcake(),this.game.dropManager.dropChocolateBar(),this.game.dropTreat2Sound.play()):this.bonusCount>=14&&this.bonusCount<16?(this.game.dropManager.dropChocolateBar(),this.game.dropManager.dropDonut(),this.game.dropTreat2Sound.play()):this.bonusCount>=16&&this.bonusCount<18?(this.game.dropManager.dropChocolateBar(),this.game.dropManager.dropCupcake(),this.game.dropManager.dropDonut(),this.game.dropTreat2Sound.play()):this.bonusCount>=16&&this.bonusCount<18&&(this.game.dropManager.dropPie(),this.game.dropTreat2Sound.play())}}class s{constructor(e,t,o){this.scene=e,this.game=o,this.materialManager=t,this.goal=new i(o)}createCapturePlane(){const e=BABYLON.MeshBuilder.CreateGround("capturePlane",{width:200,height:200,depth:0},this.scene);return e.position.y=-55,e.position.z=48,e.physicsImpostor=new BABYLON.PhysicsImpostor(e,BABYLON.PhysicsImpostor.BoxImpostor,{mass:0,restitution:0,kinematic:!1},this.scene),e.physicsImpostor.registerOnPhysicsCollide(this.scene.getPhysicsEngine().getImpostors(),((e,t)=>{t.object.dispose()})),e.isVisible=!1,e}createGoalPlane(){const e=BABYLON.MeshBuilder.CreateGround("goalPlane",{width:40,height:50,depth:0},this.scene);return e.position.y=-45,e.position.z=90,e.isVisible=!1,e.physicsImpostor=new BABYLON.PhysicsImpostor(e,BABYLON.PhysicsImpostor.BoxImpostor,{mass:0,restitution:0,kinematic:!1},this.scene),e.physicsImpostor.registerOnPhysicsCollide(this.scene.getPhysicsEngine().getImpostors(),((e,t)=>{this.goal.checkGoal(t.object)})),e}loadPlatformModel(){BABYLON.SceneLoader.ImportMesh("","assets/","gamePlatform.glb",this.scene,(e=>{if(e.length>0){const t=e[0];t.name="gamePlatform",t.position=new BABYLON.Vector3(0,9,0),t.rotation=BABYLON.Vector3.Zero(),t.setPivotMatrix(BABYLON.Matrix.Translation(0,-t.scaling.y,0))}}))}createPusher(){return this.pusher=new o(this.scene,this.materialManager,this.game),this.pusher}updatePusher(){this.pusher.updatePusher()}}class n{constructor(e,t,o){this.game=t,this.scene=e,this.materialManager=o,this.wallDownPosition=-15,this.wallUpPosition=15,this.wallSpeed=.18,this.wallDirection=1,this.wallTimer=null,this.wallsUp=!1,this.wallTime=5e3,this.wallMoving=!1,this.frameRate=60,this.DesignWalls()}DesignWalls(){this.createWall({width:3,height:60,depth:60,position:{x:0,y:-20,z:110},rotation:{x:0,y:300,z:0}}).isVisible=!1,this.createWall({width:3,height:30,depth:20,position:{x:-27,y:-5,z:25},rotation:{x:.1,y:-Math.PI/4,z:Math.PI/10}}),this.createWall({width:3,height:30,depth:20,position:{x:27,y:-5,z:25},rotation:{x:.1,y:Math.PI/4,z:-Math.PI/10}}),this.rightWall=this.createWall({width:3,height:15,depth:40,position:{x:-22,y:this.wallDownPosition,z:47}}),this.leftWall=this.createWall({width:3,height:15,depth:40,position:{x:22,y:this.wallDownPosition,z:47}}),this.leftWall.mass=1,this.rightWall.mass=2,this.leftWallParent=new BABYLON.Mesh("leftWallParent",this.scene),this.rightWallParent=new BABYLON.Mesh("rightWallParent",this.scene),this.leftWallParent.addChild(this.leftWall),this.rightWallParent.addChild(this.rightWall),this.createWall({width:3,height:15,depth:40,position:{x:-23,y:-15,z:90}}),this.createWall({width:3,height:15,depth:40,position:{x:23,y:-15,z:90}}),this.createWall({width:3,height:15,depth:40,position:{x:0,y:-18,z:65},rotation:{x:0,y:300,z:0}})}createWall(e){const t=BABYLON.MeshBuilder.CreateBox("wall",{width:e.width,height:e.height,depth:e.depth},this.scene);return t.position.x=e.position.x,t.position.y=e.position.y+e.height/2,t.position.z=e.position.z,e.rotation&&(t.rotation.x=e.rotation.x||0,t.rotation.y=e.rotation.y||0,t.rotation.z=e.rotation.z||0),t.material=this.materialManager.getMaterial("collisionBoxMaterial"),t.physicsImpostor=new BABYLON.PhysicsImpostor(t,BABYLON.PhysicsImpostor.BoxImpostor,{mass:0,restitution:.1,friction:0}),t}raiseWallsWithTween(){if(!this.wallsUp){this.wallsUp=!0,console.log("walls up11");const e=new BABYLON.Animation("raiseAnimation","position.y",this.frameRate,BABYLON.Animation.ANIMATIONTYPE_FLOAT,BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT,BABYLON.Animation.EASINGMODE_EASEINOUT),t=[];t.push({frame:0,value:0}),t.push({frame:this.frameRate,value:this.wallUpPosition}),e.setKeys(t),this.leftWallParent.animations.push(e),this.rightWallParent.animations.push(e),e.onAnimationEnd=()=>{console.log("Left wall animation finished."),this.wallRaised()},this.scene.beginAnimation(this.leftWallParent,0,this.frameRate,!1,this.wallSpeed),this.scene.beginAnimation(this.rightWallParent,0,this.frameRate,!1,this.wallSpeed)}}wallRaised(){console.log("walRaised"),this.game.wallMoveFinishSound.play(),setTimeout((()=>{console.log("  walls going down !"),this.lowerWallsWithTween()}),this.wallTime)}lowerWallsWithTween(){if(console.log("walls111 lowering walls!"),this.wallsUp){this.game.wallMoveSound.play();const e=new BABYLON.Animation("lowerAnimation","position.y",this.frameRate,BABYLON.Animation.ANIMATIONTYPE_FLOAT,BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE),t=[];t.push({frame:0,value:this.wallUpPosition}),t.push({frame:this.frameRate,value:0}),e.setKeys(t),this.leftWallParent.animations.push(e),this.rightWallParent.animations.push(e),this.scene.beginDirectAnimation(this.leftWallParent,[e],0,this.frameRate,!1,this.wallSpeed),this.scene.beginDirectAnimation(this.rightWallParent,[e],0,this.frameRate,!1,this.wallSpeed),e.onAnimationEnd=()=>{this.wallsUp=!1,console.log("this.wallsUp = false;")},setTimeout((()=>{console.log("  walls going down !"),this.wallsUp=!1,this.game.wallMoveFinishSound.play()}),this.wallTime)}}}class a{constructor(e,t,o){this.scene=e,this.materialManager=t,this.game=o,this.create(),this.walls=new n(this.scene,this.game,this.materialManager)}create(){const e=BABYLON.MeshBuilder.CreateBox("mainPlatform",{width:40,height:2,depth:100},this.scene);e.position.y=-1,e.position.z=20,e.material=this.materialManager.getMaterial("collisionBoxMaterial"),e.physicsImpostor=new BABYLON.PhysicsImpostor(e,BABYLON.PhysicsImpostor.BoxImpostor,{mass:0,restitution:0,friction:.05},this.scene);const t=BABYLON.MeshBuilder.CreateBox("backSlope",{width:3,height:90,depth:70},this.scene);t.position.x=0,t.position.y=10,t.rotation.y=Math.PI/2,t.position.z=-22,t.rotation.z=-Math.PI/10;const o=BABYLON.MeshBuilder.CreateBox("rightSlope",{width:3,height:90,depth:70},this.scene);o.position.x=-20,o.position.y=10,o.position.z=-15,o.rotation.z=Math.PI/10;const i=BABYLON.MeshBuilder.CreateBox("leftSlope",{width:3,height:90,depth:70},this.scene);i.position.x=20,i.position.y=10,i.position.z=-15,i.rotation.z=-Math.PI/10;const s={mass:0,restitution:.1,friction:0};return i.physicsImpostor=new BABYLON.PhysicsImpostor(i,BABYLON.PhysicsImpostor.BoxImpostor,s,this.scene),o.physicsImpostor=new BABYLON.PhysicsImpostor(o,BABYLON.PhysicsImpostor.BoxImpostor,s,this.scene),t.physicsImpostor=new BABYLON.PhysicsImpostor(t,BABYLON.PhysicsImpostor.BoxImpostor,s,this.scene),e}}class r{constructor(e,t,o,i){this.scene=e,this.materialManager=t,this.game=o}async initializeMasterCookie(){try{const e=await BABYLON.SceneLoader.ImportMeshAsync("","assets/","chocolateChipCookie.glb",this.scene);console.log("Loaded meshes:",e.meshes);const t=e.meshes.find((e=>"yourCookieMeshId"===e.id));t&&t.geometry?(this.masterCookie=t,this.masterCookie.isVisible=!1,this.masterCookie.setEnabled(!1)):console.error("No geometry found in the imported meshes")}catch(e){console.error("Error loading master cookie mesh:",e)}}async waitForPlatformImpostor(){for(;!this.game.platformImpostor;)await new Promise((e=>setTimeout(e,100)))}async createCookie(e,t,o,i){return o||(console.warn("Waiting for platform impostor to be ready..."),await this.platformImpostor),new Promise((async e=>{await new Promise((e=>{BABYLON.SceneLoader.ImportMesh("","assets/","sugarCookie.glb",this.scene,(s=>{if(s.length>0){const n=s[0];n.name="cookie",n.initialCollision=!0,n.position=new BABYLON.Vector3(0,17.2,0),n.rotation=BABYLON.Vector3.Zero(),n.setPivotMatrix(BABYLON.Matrix.Translation(0,-n.scaling.y,0)),n.scaling=new BABYLON.Vector3(14,18,14);const a=BABYLON.MeshBuilder.CreateCylinder("cookieCylinder",{height:2,diameterTop:7.5,diameterBottom:8,tessellation:12},this.scene);a.position=t,a.physicsImpostor=new BABYLON.PhysicsImpostor(a,BABYLON.PhysicsImpostor.CylinderImpostor,{mass:1,restitution:.5,friction:.05},this.scene),a.physicsImpostor.registerOnPhysicsCollide(o,((e,t)=>{n.initialCollision&&(this.game.thudSound.play(),n.initialCollision=!1)})),a.physicsImpostor.registerOnPhysicsCollide(i,((e,t)=>{n.initialCollision&&(this.game.thudSound.play(),n.initialCollision=!1)})),n.parent=a,a.isVisible=!1,e(n)}}))})),e()}))}createDonut(){BABYLON.SceneLoader.ImportMesh("","assets/","pinkDonut.glb",this.scene,(e=>{if(e.length>0){const t=e[0];t.name="donut",t.position=new BABYLON.Vector3(0,9,0),t.rotation=BABYLON.Vector3.Zero(),t.setPivotMatrix(BABYLON.Matrix.Translation(0,-t.scaling.y,0)),t.scaling=new BABYLON.Vector3(10,10,10);const o=BABYLON.MeshBuilder.CreateCylinder("donutCylinder",{height:6,diameterTop:1.6*t.scaling.x,diameterBottom:1.7*t.scaling.x,tessellation:12},this.scene);o.position=new BABYLON.Vector3(0,40,0),t.parent=o,o.physicsImpostor=new BABYLON.PhysicsImpostor(o,BABYLON.PhysicsImpostor.CylinderImpostor,{mass:3,restitution:.1,friction:.1},this.scene),o.isVisible=!1}}))}createCupcake(){BABYLON.SceneLoader.ImportMesh("","assets/","cupcake.glb",this.scene,(e=>{if(e.length>0){const t=e[0];t.name="cupcake",t.position=new BABYLON.Vector3(0,13,0),t.rotation=BABYLON.Vector3.Zero(),t.setPivotMatrix(BABYLON.Matrix.Translation(0,-t.scaling.y,0)),t.scaling=new BABYLON.Vector3(10,10,10);const o=BABYLON.MeshBuilder.CreateCylinder("cupcakeCylinder",{height:10,diameterTop:1.3*t.scaling.x,diameterBottom:.8*t.scaling.x,tessellation:12},this.scene);o.position=new BABYLON.Vector3(0,40,0),t.parent=o,o.physicsImpostor=new BABYLON.PhysicsImpostor(o,BABYLON.PhysicsImpostor.CylinderImpostor,{mass:2,restitution:.1,friction:.05},this.scene),o.isVisible=!1}}))}createChocolateBar(){BABYLON.SceneLoader.ImportMesh("","assets/","chocolateBar.glb",this.scene,(e=>{if(e.length>0){const t=e[0];t.name="chocolateBar",t.position=new BABYLON.Vector3(0,9,0),t.rotation=BABYLON.Vector3.Zero(),t.setPivotMatrix(BABYLON.Matrix.Translation(0,-t.scaling.y,0)),t.scaling=new BABYLON.Vector3(10,10,10);const o=BABYLON.MeshBuilder.CreateBox("chocolateBarBox",{height:1.5,width:17,depth:7},this.scene);o.position=new BABYLON.Vector3(0,40,0),t.parent=o,o.physicsImpostor=new BABYLON.PhysicsImpostor(o,BABYLON.PhysicsImpostor.BoxImpostor,{mass:2.4,restitution:.05,friction:.07},this.scene),o.isVisible=!1}}))}createPie(){BABYLON.SceneLoader.ImportMesh("","assets/","pie.glb",this.scene,(e=>{if(e.length>0){const t=e[0];t.name="pie",t.position=new BABYLON.Vector3(0,9,0),t.rotation=BABYLON.Vector3.Zero(),t.setPivotMatrix(BABYLON.Matrix.Translation(0,-t.scaling.y,0)),t.scaling=new BABYLON.Vector3(10,10,10);const o=this.createPieCollisionBox();o.position=new BABYLON.Vector3(0,40,0),t.parent=o,o.physicsImpostor=new BABYLON.PhysicsImpostor(o,BABYLON.PhysicsImpostor.BoxImpostor,{mass:2.4,restitution:.05,friction:.07},this.scene),t.isCounted=!1}}))}createPieCollisionBox(){const e=BABYLON.MeshBuilder.CreateBox("box1",{height:1.5,width:10,depth:10},this.scene);e.position=new BABYLON.Vector3(0,0,0);const t=BABYLON.MeshBuilder.CreateBox("box2",{height:1.5,width:10,depth:10},this.scene);t.position=new BABYLON.Vector3(5,0,0),t.rotation.y=Math.PI/3;const o=BABYLON.MeshBuilder.CreateBox("box3",{height:1.5,width:10,depth:10},this.scene);o.position=new BABYLON.Vector3(-5,0,0),o.rotation.y=-Math.PI/3;const i=BABYLON.Mesh.MergeMeshes([e,t,o],!0,!0,void 0,!1,!0);return i.name="pieBox",console.log("pieCollisionBox!",i.name),i.position=new BABYLON.Vector3(0,9,0),i.physicsImpostor=new BABYLON.PhysicsImpostor(i,BABYLON.PhysicsImpostor.BoxImpostor,{mass:2.4,restitution:.05,friction:.07},this.scene),i}createCola(){BABYLON.SceneLoader.ImportMesh("","assets/","cola.glb",this.scene,(e=>{if(e.length>0){const t=e[0];t.name="cola",t.position=new BABYLON.Vector3(0,26,0),t.rotation=BABYLON.Vector3.Zero(),t.setPivotMatrix(BABYLON.Matrix.Translation(0,-t.scaling.y,0)),t.scaling=new BABYLON.Vector3(25,25,25);const o=BABYLON.MeshBuilder.CreateCylinder("colaCylinder",{height:39,diameterTop:.4*t.scaling.x,diameterBottom:.65*t.scaling.x,tessellation:12},this.scene);o.position=new BABYLON.Vector3(0,40,0),t.parent=o,o.physicsImpostor=new BABYLON.PhysicsImpostor(o,BABYLON.PhysicsImpostor.CylinderImpostor,{mass:2,restitution:.1,friction:.2},this.scene),o.isVisible=!0}}))}createCake(){BABYLON.SceneLoader.ImportMesh("","assets/","cake.glb",this.scene,(e=>{if(e.length>0){const t=e[0];t.name="cake",t.position=new BABYLON.Vector3(0,35,0),t.rotation=BABYLON.Vector3.Zero(),t.setPivotMatrix(BABYLON.Matrix.Translation(0,-t.scaling.y,0)),t.scaling=new BABYLON.Vector3(25,25,25);const o=BABYLON.MeshBuilder.CreateCylinder("cakeCylinder",{height:15,diameterTop:1*t.scaling.x,diameterBottom:1.12*t.scaling.x,tessellation:12},this.scene);o.position=new BABYLON.Vector3(0,60,0),t.parent=o,o.physicsImpostor=new BABYLON.PhysicsImpostor(o,BABYLON.PhysicsImpostor.CylinderImpostor,{mass:2,restitution:.1,friction:.05},this.scene),o.isVisible=!0}}))}}class h{constructor(e,t,o,i,s){this.scene=e,this.game=i,this.materialManager=t,this.loadedMonkeyModel=null,this.scaleFactor=2,this.platformImpostor=o,this.pusher=s,this.objects=new r(this.scene,this.materialManager,this.game)}loadMonkeyModel(){BABYLON.SceneLoader.ImportMesh("","assets/","monkey.glb",this.scene,(e=>{e.length>0&&(this.loadedMonkeyModel=e[0],this.loadedMonkeyModel.isVisible=!1,this.loadedMonkeyModel.scaling=new BABYLON.Vector3(this.scaleFactor,this.scaleFactor,this.scaleFactor))}))}dropMonkeyModel(){if(this.loadedMonkeyModel){const e=this.loadedMonkeyModel.clone("monkeyClone");e.isVisible=!0,e.position=new BABYLON.Vector3(0,40,110);const t=BABYLON.MeshBuilder.CreateBox("boundingBox",{width:2*this.scaleFactor,height:2*this.scaleFactor,depth:2*this.scaleFactor},this.scene);return t.isVisible=!1,t.position=e.position,t.physicsImpostor=new BABYLON.PhysicsImpostor(t,BABYLON.PhysicsImpostor.BoxImpostor,{mass:1,restitution:.1},this.scene),t.addChild(e),t}}dropCookie(e,t){const o=this.objects.createCookie(e,t,this.platformImpostor,this.pusher);if(!this.droppingCookies)return this.droppingCookies=!0,o.then((e=>{this.droppingCookies=!1})).catch((e=>{console.error(e),this.droppingCookies=!1})),o}dropDonut(){if(this.game.donutCount>0)return this.game.donutCount-=1,this.game.uiManager.updateDonutCounter(),this.objects.createDonut()}dropCupcake(){if(this.game.cupcakeCount>0)return this.game.cupcakeCount-=1,this.game.uiManager.updateCupcakeCounter(),this.objects.createCupcake()}dropChocolateBar(){if(this.game.chocolateCount>0)return this.game.chocolateCount-=1,this.game.uiManager.updateChocolateCounter(),this.objects.createChocolateBar()}dropPie(){if(this.game.pieCount>0)return this.game.pieCount-=1,this.game.uiManager.updatePieCounter(),this.objects.createPie()}dropCola(){if(this.game.colaCount>0)return this.game.colaCount-=1,this.game.uiManager.updateColaCounter(),this.objects.createCola()}dropCake(){if(this.game.cakeCount>0)return this.game.cakeCount-=1,this.game.uiManager.updateCakeCounter(),this.objects.createCake()}}class l{constructor(e,t,o,i){this.scene=e,this.materialManager=t,this.dropManager=o,this.game=i,this.maxDrops=6,this.availableDrops=this.maxDrops,this.dropCooldown=1e3,this.cooldownTimer=null,this.coinPipeSpeed=.25,this.coinPipeLimit=20,this.coinPipeDirection=1,this.createCoinPipe(),this.game.uiManager.updateDropCounter(this.availableDrops),this.game.uiManager.updateCookieCounter(this.cookieCount)}createCoinPipe(){this.coinPipe=BABYLON.MeshBuilder.CreateCylinder("coinPipe",{height:30,diameter:10},this.scene),this.coinPipe.position=new BABYLON.Vector3(0,50,0),this.coinPipe.material=this.materialManager.getMaterial("someMaterial")}updateCoinPipe(){this.coinPipe.position.x+=this.coinPipeSpeed*this.coinPipeDirection,(this.coinPipe.position.x>this.coinPipeLimit||this.coinPipe.position.x<-this.coinPipeLimit)&&(this.coinPipeDirection*=-1)}dropCoinFromPipe(){if(this.availableDrops>0&&this.game.cookieCount>0){var e=new BABYLON.Vector3(this.coinPipe.position.x,this.coinPipe.position.y-16,this.coinPipe.position.z);this.dropManager.dropCookie(!0,e),this.game.poofSound.play(),this.consumeDrop(),this.game.cookieCount-=1,this.game.uiManager.updateCookieCounter(this.game.cookieCount)}}consumeDrop(){this.availableDrops-=1,this.game.uiManager.updateDropCounter(this.availableDrops),clearTimeout(this.cooldownTimer),this.cooldownTimer=setTimeout((()=>{this.incrementDrop()}),this.dropCooldown)}incrementDrop(){this.availableDrops<this.maxDrops&&(this.availableDrops+=1,this.game.uiManager.updateDropCounter(this.availableDrops),this.cooldownTimer=setTimeout((()=>{this.incrementDrop()}),500))}resetDrops(){this.availableDrops=this.maxDrops,this.game.uiManager.updateDropCounter(this.availableDrops)}}class c{constructor(e,t){this.scene=e,this.game=t,this.level=1}levelSystem(e){for(let t=0;t<2;t++){const t=1,o=3,i=7.8,s=-o/2*i+3.5,n=22,a=40,r=[],h=(l,c)=>{const u=s+c*i,p=n+l*i,d=new BABYLON.Vector3(u,a,p),m=this.game.dropManager.dropCookie(!1,d);if(m&&(m.rotation=BABYLON.Vector3.Zero(),r.push(m)),l<t-1||c<o-1)c<o-1?h(l,c+1):h(l+1,0);else{const t=5,o=5,i=8.8,s=-o/2*i+3.5,n=32,h=(l,c)=>{const u=s+c*i,p=n+l*i,d=new BABYLON.Vector3(u,a,p),m=this.game.dropManager.dropCookie(!1,d);m&&(m.rotation=BABYLON.Vector3.Zero(),r.push(m)),l<t-1||c<o-1?c<o-1?h(l,c+1):h(l+1,0):e(r)};h(0,0)}};h(0,0)}}}class u{constructor(e){this.game=e,this.sugarCounterElement=document.createElement("div"),this.sugarCounterElement.id="sugarCounter",document.body.appendChild(this.sugarCounterElement),this.scoreCounterElement=document.createElement("div"),this.scoreCounterElement.id="scoreCounter",document.body.appendChild(this.scoreCounterElement),this.dropCounterElement=document.createElement("div"),this.dropCounterElement.id="dropCounter",document.body.appendChild(this.dropCounterElement),this.cookieCounterElement=document.createElement("div"),this.cookieCounterElement.id="cookieCounter",document.body.appendChild(this.cookieCounterElement),this.cupcakeCounterElement=document.createElement("div"),this.cupcakeCounterElement.id="cupcakeCounter",document.body.appendChild(this.cupcakeCounterElement),this.donutCounterElement=document.createElement("div"),this.donutCounterElement.id="donutCounter",document.body.appendChild(this.donutCounterElement),this.chocolateCounterElement=document.createElement("div"),this.chocolateCounterElement.id="chocolateCounter",document.body.appendChild(this.chocolateCounterElement),this.pieCounterElement=document.createElement("div"),this.pieCounterElement.id="pieCounter",document.body.appendChild(this.pieCounterElement),this.colaCounterElement=document.createElement("div"),this.colaCounterElement.id="colaCounter",document.body.appendChild(this.colaCounterElement),this.cakeCounterElement=document.createElement("div"),this.cakeCounterElement.id="cakeCounter",document.body.appendChild(this.cakeCounterElement),this.updateScore(),this.updateSugarCounter(),this.updateDropCounter(6),this.updateCookieCounter(this.game.cookieCount),this.updateCupcakeCounter(this.game.cupcakeCount),this.updateDonutCounter(this.game.donutCount),this.updateChocolateCounter(this.game.chocolateCount),this.updatePieCounter(this.game.pieCount),this.updateColaCounter(this.game.colaCount),this.updateCakeCounter(this.game.cakeCount)}updateSugarCounter(){this.sugarCounterElement.textContent=`Sugar: ${this.game.sugar}`}updateScore(){this.scoreCounterElement.textContent=`Score: ${this.game.score}`}updateDropCounter(e){this.dropCounterElement.textContent=`Drops: ${e}/6`}updateCookieCounter(){this.cookieCounterElement.textContent=`${this.game.cookieCount}`}updateCupcakeCounter(){this.cupcakeCounterElement.textContent=`${this.game.cupcakeCount}`}updateDonutCounter(){this.donutCounterElement.textContent=`${this.game.donutCount}`}updateChocolateCounter(){this.chocolateCounterElement.textContent=`${this.game.chocolateCount}`}updatePieCounter(){this.pieCounterElement.textContent=`${this.game.pieCount}`}updateColaCounter(){this.colaCounterElement.textContent=`${this.game.colaCount}`}updateCakeCounter(){this.cakeCounterElement.textContent=`${this.game.cakeCount}`}}class p{constructor(e){this.game=e,this.initSound()}initSound(){this.game.wallMoveSound=new BABYLON.Sound("wallMove","../assets/sound/wallMove.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.wallMoveFinishSound=new BABYLON.Sound("wallMoveFinish","../assets/sound/wallMoveFinish.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.clickSound=new BABYLON.Sound("click","../assets/sound/click.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.thudSound=new BABYLON.Sound("thud","../assets//sound/thud.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.getSound=new BABYLON.Sound("get","../assets/sound/get.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.getTreatSound=new BABYLON.Sound("get","../assets/sound/getTreat.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.dropTreatSound=new BABYLON.Sound("get","../assets/sound/dropTreat.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.dropTreat2Sound=new BABYLON.Sound("get","../assets/sound/dropTreat2.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.poofSound=new BABYLON.Sound("get","../assets/sound/poof.mp3",this.scene,{autoplay:!1,volume:.5,loop:!1}),this.game.get1Sound=new BABYLON.Sound("get1","../assets/sound/get1.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.get2Sound=new BABYLON.Sound("get2","../assets/sound/get2.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.get3Sound=new BABYLON.Sound("get3","../assets/sound/get3.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.get4Sound=new BABYLON.Sound("get4","../assets/sound/get4.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.get5Sound=new BABYLON.Sound("get5","../assets/sound/get5.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.get6Sound=new BABYLON.Sound("get6","../assets/sound/get6.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.get7Sound=new BABYLON.Sound("get7","../assets/sound/get7.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.get8Sound=new BABYLON.Sound("get8","../assets/sound/get8.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.get9Sound=new BABYLON.Sound("get9","../assets/sound/get9.mp3",this.scene,{autoplay:!1,volume:1,loop:!1}),this.game.get10Sound=new BABYLON.Sound("get10","../assets/sound/get10.mp3",this.scene,{autoplay:!1,volume:1,loop:!1})}}class d{constructor(e){this.game=e,this.init(),this.clicks=0,this.clicksToMakeCookie=8}init(){}makeCookie(){this.clicks++,this.clicks>=this.clicksToMakeCookie&&(this.game.cookieCount++,this.clicks=0,this.game.uiManager.updateCookieCounter()),console.log("CLICK!")}}new class{constructor(o){this.debugMode=!0;const i=document.getElementById("startButton");i&&i.addEventListener("click",(()=>{this.startGame()})),window.addEventListener("click",(()=>{this.thudSound.play(),this.thudSound.pause()}),{once:!0}),window.addEventListener("keydown",(e=>this.onKeyDown(e))),this.canvas=document.getElementById(o),this.engine=new BABYLON.Engine(this.canvas,!0,{antialias:!0,allowSleep:!0,sleepTimeLimit:2}),this.cookieCount=50,this.cupcakeCount=10,this.donutCount=10,this.chocolateCount=10,this.pieCount=10,this.colaCount=10,this.cakeCount=10,this.score=0,this.sugar=0,this.wallTokens=100,this.wallsUp=!1,this.wallsDown=!1,this.sceneManager=new e(this.engine,this.canvas),this.scene=this.sceneManager.getScene(),this.uiManager=new u(this),this.cookieMaker=new d(this),this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.jingle2=[261.63,293.66,329.63,349.23,392,440,493.88,523.25],this.soundManager=new p(this),this.materialManager=new t(this.scene),this.gameObjectManager=new s(this.scene,this.materialManager,this),this.platform=new a(this.scene,this.materialManager,this);const n=this.platform.create().physicsImpostor,r=this.gameObjectManager.createPusher().physicsImpostor;this.gameObjectManager.createGoalPlane(),this.gameObjectManager.createCapturePlane(),this.gameObjectManager.loadPlatformModel(),this.dropManager=new h(this.scene,this.materialManager,n,this,r),this.coinPipeManager=new l(this.scene,this.materialManager,this.dropManager,this),this._startGameLoop(),this._setupButtons(),new c(this.scene,this).levelSystem((e=>{}))}doAThing(){console.log("did a thing")}onKeyDown(e){console.log("onKeyDown onKeyDown"),"q"===e.key&&(this.thudSound.play(),this.getSound.play())}_startGameLoop(){this.engine.runRenderLoop((()=>{this.coinPipeManager.updateCoinPipe(),this.scene.render()}))}_setupButtons(){const e=document.getElementById("dropCookieButton");e&&e.addEventListener("click",(()=>{this.coinPipeManager.dropCoinFromPipe(!0)}));const t=document.getElementById("makeCookieButton");t&&t.addEventListener("click",(()=>{this.cookieMaker.makeCookie(),this.clickSound.play()}));const o=document.getElementById("dropDonutButton");o&&o.addEventListener("click",(()=>{this.dropManager.dropDonut()}));const i=document.getElementById("dropCupcakeButton");i&&i.addEventListener("click",(()=>{this.dropManager.dropCupcake()}));const s=document.getElementById("dropChocolateBarButton");s&&s.addEventListener("click",(()=>{this.dropManager.dropChocolateBar()}));const n=document.getElementById("dropPieButton");n&&n.addEventListener("click",(()=>{this.dropManager.dropPie()}));const a=document.getElementById("dropColaButton");a&&a.addEventListener("click",(()=>{this.dropManager.dropCola()}));const r=document.getElementById("dropCakeButton");r&&r.addEventListener("click",(()=>{this.dropManager.dropCake()}));const h=document.getElementById("wallButton");h&&h.addEventListener("click",(()=>{this.platform.walls.wallsUp||(this.wallMoveSound.play(),this.platform.walls.raiseWallsWithTween(),setTimeout((()=>{this.platform.walls.wallRaised()}),this.platform.walls.wallTime))}));const l=document.getElementById("bigPushButton");l&&l.addEventListener("click",(()=>{this.gameObjectManager.pusher.bigPush()}));const c=document.getElementById("toggleCameraLockButton");c&&c.addEventListener("click",(()=>{this.sceneManager.cameraLock()}))}}("renderCanvas")}},e=>{e(e.s=897)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,